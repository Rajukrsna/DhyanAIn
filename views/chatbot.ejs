<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Recipe Finder</title>
  <!-- Bootstrap CSS -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<style>
   body {
            background: url('https://www.transparenttextures.com/patterns/black-linen.png'), linear-gradient(135deg, #eef2f3, #8e9eab);
            font-family: 'Poppins', sans-serif;
            color: #333;
            min-height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 20px;
        }

  h2 {
    color: #007bff;
    font-weight: bold;
  }

  /* Chat Box Styling */
  #chat-box {
    max-height: 400px;
    overflow-y: auto;
    background-color: #f9f9f9;
    border: 1px solid #e0e0e0;
    padding: 15px;
    border-radius: 8px;
    margin-bottom: 10px;
    box-shadow: 0px 2px 8px rgba(0, 0, 0, 0.1);
  }

  /* Message Bubble */
  .message {
    display: flex;
    align-items: flex-end;
    margin-bottom: 10px;
  }

  .message .bubble {
    max-width: 70%;
    padding: 10px 15px;
    border-radius: 15px;
    font-size: 14px;
    line-height: 1.5;
    position: relative;
    word-wrap: break-word;
    box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.1);
    animation: fadeInUp 0.3s ease-in-out;
  }

  /* User Messages */
  .message.user {
    justify-content: flex-end;
  }

  .message.user .bubble {
    background-color: #0084ff;
    color: white;
    border-bottom-right-radius: 0;
  }

  /* Assistant Messages */
  .message.assistant {
    justify-content: flex-start;
  }

  .message.assistant .bubble {
    background-color: #e4e6eb;
    color: #333;
    border-bottom-left-radius: 0;
  }

  /* Avatar Icons */
  .avatar {
    width: 32px;
    height: 32px;
    border-radius: 50%;
    margin-right: 8px;
    background-color: #ccc;
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: bold;
    color: white;
  }

  .message.user .avatar {
    margin-left: 8px;
    margin-right: 0;
    background-color: #007bff;
  }

  /* Fade-in Animation */
  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .card {
    border: 1px solid #ddd;
    border-radius: 12px;
    overflow: hidden;
    transition: transform 0.3s ease, box-shadow 0.3s ease;
    background: #fff;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  }

  .card:hover {
    transform: translateY(-8px);
    box-shadow: 0 12px 24px rgba(0, 0, 0, 0.2);
  }

  .card-header {
    background-color: #007bff;
    color: #fff;
    padding: 16px;
    text-align: center;
    border-bottom: 2px solid #0056b3;
    font-weight: bold;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .card-header i {
    margin-right: 8px;
  }

  .card-title {
    font-size: 1.4rem;
    margin: 0;
  }

  .card-body {
    padding: 16px;
  }

  .card-body h6 {
    font-size: 1.1rem;
    margin-bottom: 8px;
    border-bottom: 2px solid #007bff;
    padding-bottom: 4px;
    color: #007bff;
    display: flex;
    align-items: center;
  }

  .card-body h6 i {
    margin-right: 8px;
  }

  .card-body ul {
    list-style-type: square;
    padding-left: 20px;
  }

  .card-body li {
    margin-bottom: 6px;
    color: #555;
  }

  .card-body p {
    margin-top: 12px;
    line-height: 1.5;
    color: #333;
  }

  .col-md-4 {
    padding: 12px;
  }

  .mb-4 {
    margin-bottom: 24px;
  }

  .btn-primary {
    background-color: #28a745;
    border-color: #28a745;
    font-weight: bold;
  }

  .btn-primary:hover {
    background-color: #218838;
    border-color: #1e7e34;
  }

  .btn-outline-success {
    font-weight: bold;
  }

  .btn-outline-danger {
    font-weight: bold;
  }

  #loading p {
    font-weight: bold;
    color: #007bff;
  }

  #recipeCards {
    display: flex;
    flex-wrap: wrap;
    gap: 12px;
    justify-content: center;
  }

  .input-group input {
    border-radius: 4px;
  }
    </style>
<body>
  <div class="container mt-5">
    <div class="row gx-4">
      <!-- Recipe Finder Card (Left Side) -->
      <div class="col-md-4">
        <div class="card shadow">
          <div class="card-header bg-primary text-white">
            <h2 class="mb-0">Recipe Finder</h2>
          </div>
          <div class="card-body">
            <!-- User Input Form -->
            <div class="mb-4">
              <form id="ingredient-form">
                <div class="mb-3">
                  <label for="ingredients" class="form-label">Enter Ingredients (comma-separated)</label>
                  <input type="text" id="ingredients" class="form-control" placeholder="e.g., chicken, tomato, potato" required>
                </div>
                <button type="submit" class="btn btn-primary w-100">Get Recipes</button>
              </form>
            </div>
          </div>
        </div>
      </div>
  
      <!-- Recipe Container Card (Right Side) -->
      <div class="col-md-8">
        <div class="card shadow">
          <div class="card-header bg-success text-white">
            <h3 class="mb-0">Recipes</h3>
          </div>
          <div class="card-body" style="min-height: 250px; max-height: 500px; overflow-y: auto;">
            <div id="awaiting-message" class="text-center text-muted py-5">
              <div class="spinner-border text-primary mb-3" role="status">
                <span class="visually-hidden">Loading...</span>
              </div>
              <h5>Awaiting Results</h5>
              <p>Your recipes will appear here soon!</p>
            </div>
            <div id="recipe-container" class="row row-cols-1 row-cols-md-2 g-4 d-none">
              <!-- Recipe cards will be dynamically injected here -->
            </div>
          </div>
        </div>
      </div>
    </div>

    <br>

    <div class="row gx-4">
      <!-- Image Upload Card -->
      <div class="col-md-4">
        <div class="card shadow">
          <div class="card-header">
            <h2 class="mb-0">Upload Food Packet</h2>
          </div>
          <div class="card-body">
            <label for="imageInput" class="form-label">Select an image of processed food packet</label>
                <img id="uploadedImage2" src="https://via.placeholder.com/400x250.png?text=Sample+Image" alt="Uploaded Image Preview" class="img-fluid" style="max-height: 250px; border-radius: 12px; display: block; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);" />

            <form id="upload-form "enctype="multipart/form-data">
              
              <div class="mb-3">
                
                <input type="file" id="imageInput" class="form-control" accept="image/*"  onchange="previewImage2(event)" required>
              </div>
              <button type="submit" id="uploadButton" class="btn btn-primary w-100">Analyze Image</button>
            </form>
            <div id="loading" class="mt-3">
              <div class="spinner-border" role="status"></div>
              <p>Analyzing Image...</p>
            </div>
          </div>
        </div>
      </div>
  
      <!-- Chat Interface -->
      <div class="col-md-8">
        <div class="card shadow">
          <div class="card-header bg-success text-white">
            <h3 class="mb-0">Chat About Your Food Packet</h3>
          </div>
          <div class="card-body">
            <div id="chatSection">
              <div id="chat-box" class="mb-3"></div>
              <div class="chat-input d-flex">
                <input type="text" id="userInput" class="form-control me-2" placeholder="Ask anything about the food packet...">
                <button id="sendButton" class="btn btn-primary">Send</button>
              </div>
            </div>
            <div id="chat" class="text-center">
              <p class="text-muted">Upload an image to start the chat.</p>
            </div>
          </div>
        </div>
      </div>
    </div>

  </div>
  
    
  <!-- Bootstrap JS -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

 
  <script>
    function previewImage2(event) {
          const file = event.target.files[0];
          const reader = new FileReader();
          const uploadedImage = document.getElementById('uploadedImage2');
    
          reader.onload = function (e) {
              uploadedImage.src = e.target.result; // Set the preview image source
              uploadedImage.style.display = 'block'; // Make the image visible
          };
    
          if (file) {
              reader.readAsDataURL(file); // Convert file to data URL
          }
      }
    </script>

<script>


  const uploadButton = document.getElementById('uploadButton');
  const imageInput = document.getElementById('imageInput');
  const chatSection = document.getElementById('chatSection');
  const chat = document.getElementById('chat');
  const userInput = document.getElementById('userInput');
  const sendButton = document.getElementById('sendButton');

  let extractedContent = ''; // To store extracted information for chatbot responses

  uploadButton.addEventListener('click', async () => {
    event.preventDefault()
    console.log("fcj yoy")
    const file = imageInput.files[0];

    if (!file) {
      displayMessage('Please select an image to upload.', 'error');
      return;
    }

    const formData = new FormData();
    formData.append('image', file);

    displayMessage('Uploading image and analyzing...', 'user');

    try {
      const response = await fetch('/chatbot/analyzePacket', {
        method: 'POST',
        body: formData,
      });

      if (!response.ok) {
        throw new Error('Failed to analyze the image.');
      }

      const data = await response.json();
      console.log(data);
      extractedContent = data.extractedContent;
console.log(extractedContent);
      displayMessage('Analysis Complete: You can ask questions Related to your food ');

      // Show chat section after successful analysis
      chatSection.style.display = 'flex';
    } catch (error) {
      displayMessage(error.message, 'error');
    }
  });

  sendButton.addEventListener('click', async () => {
    const question = userInput.value.trim();

    if (!question) {
      return;
    }

    displayMessage(question, 'user');
    userInput.value = '';

    try {
      const response = await fetch('/chatbot/askQuestion', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ question, extractedContent }),
      });

      if (!response.ok) {
        throw new Error('Failed to get response from the assistant.');
      }

      const data = await response.json();
      console.log("bot Resonpnse", data.answer)
      displayMessage(data.answer, 'assistant');
    } catch (error) {
      displayMessage(error.message, 'error');
    }
  });

  function displayMessage(text, type) {
  const chatBox = document.getElementById('chat-box');
  const messageElement = document.createElement('div');
  messageElement.classList.add('message', type);

  const bubble = document.createElement('div');
  bubble.classList.add('bubble');
  bubble.textContent = text;

  const avatar = document.createElement('div');
  avatar.classList.add('avatar');

  if (type === 'user') {
    avatar.textContent = 'U';
  } else if (type === 'assistant') {
    avatar.textContent = 'A';
  }

  if (type === 'user') {
    messageElement.appendChild(bubble);
    messageElement.appendChild(avatar);
  } else {
    messageElement.appendChild(avatar);
    messageElement.appendChild(bubble);
  }

  chatBox.appendChild(messageElement);
  chatBox.scrollTop = chatBox.scrollHeight; // Auto-scroll to the bottom
}

</script>



<script>
  document.getElementById('ingredient-form').addEventListener('submit', async function (e) {
    e.preventDefault();

    const ingredientsInput = document.getElementById('ingredients').value;
    const awaitingMessage = document.getElementById("awaiting-message");

    console.log(ingredientsInput);
   // Send AJAX request to backend
   fetch('/chatbot/chat', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ ingredients:ingredientsInput })
  })
  .then(response => response.text())
  .then(data => {
      const responseObject = JSON.parse(data);
    const accumulatedDelta = responseObject.accumulatedDelta;
    const cleanedData = accumulatedDelta
      .replace(/```/g, '')  // Remove any backticks
      .trim();  // Remove leading/trailing whitespace

    const parsedData = JSON.parse(cleanedData);
    console.log(parsedData); // Check the cleaned and parsed data
    // Get the recipe cards container
    const recipeCardsContainer = document.getElementById('recipe-container');
    recipeCardsContainer.innerHTML = ''; // Clear previous results

    if (data) {
      // Loop through each recipe and create a Bootstrap card
      parsedData.recipes.forEach(recipe => {
        const cardHTML = `
          <div class="col-md-8 mb-4">
            <div class="card shadow">
              <div class="card-header">
                <i class="fas fa-utensil-spoon"></i>
                <h5 class="card-title">${recipe.title}</h5>
              </div>
              <div class="card-body">
                <h6><i class="fas fa-list-ul"></i> Ingredients:</h6>
                <ul>
                  ${recipe.ingredients.map(ingredient => `<li>${ingredient}</li>`).join('')}
                </ul>
                <h6><i class="fas fa-concierge-bell"></i> Instructions:</h6>
                <p>${recipe.instructions}</p>
              </div>
            </div>
          </div>
        `;
        // Append the card to the container
        recipeCardsContainer.innerHTML += cardHTML;
        awaitingMessage.classList.add("d-none");
        recipeCardsContainer.classList.remove("d-none");
      });

      // Display the recipe cards
      recipeCardsContainer.style.display = 'flex';
      recipeCardsContainer.style.flexWrap = 'wrap';
    } else {
      recipeCardsContainer.innerHTML = '<p class="text-center">No recipes found. Please try different ingredients.</p>';
      recipeCardsContainer.style.display = 'block';
    }
  })
  .catch(error => {
    console.error('Error:', error);
    document.getElementById('recipe-container').innerHTML = '<p class="text-center text-danger">An error occurred while fetching recipes. Please try again later.</p>';
    document.getElementById('recipe-container').style.display = 'block';
  });
});

</script>
</body>
</html>
